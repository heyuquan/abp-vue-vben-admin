ABP框架的主要目标之一就是提供便捷的基础设施来创建微服务解决方案
有两种类型的模块
框架模块: 这些是 框架的核心模块,像缓存,邮件,主题,安全性,序列化,验证,Ef Core集成,MongoDB集成...等等. 它们没有应用程序/业务功能,但通过提供通用基础架构,集成和抽象会使你的日常开发更加容易.
应用程序模块: 这些模块是实现特定的应用程序/业务功能,像 博客, 文档管理, 身份管理, 租户管理... 等等. 它是通常有自己的实体,服务,API和UI组件.
	Account: 用于用户登录/注册应用程序.
	Audit Logging: 用于将审计日志持久化到数据库.
	Background Jobs: 用于在使用默认后台作业管理器时保存后台作业.
	Blogging: 用于创建精美的博客. ABP的博客 就使用了此模块.
	Docs: 用于创建技术文档页面. ABP的文档 就使用了此模块.
	Identity: 用于管理角色,用户和他们的权限.
	Identity Server: 集成了IdentityServer4.
	Permission Management: 用于保存权限.
	Setting Management: 用于保存设置.
	Tenant Management: 用于管理多租户应用程序的租户.
	Users: 用于抽象用户, 因此其他模块可以依赖此模块而不是Identity模块.

实体转化
	表现层：viewModel >> input
	应用层：输入input，输出output   （或Dto）
	领域层：参数不再封装为对象，只有参数比较多时才封装对象。
	        但可以直接传递应用层（input|output|dto）参数（避免再多一层对象转换，）

Abp Cli==================
dotnet tool install -g Volo.Abp.Cli
dotnet tool update -g Volo.Abp.Cli

abp help        # 显示常规帮助.
abp new Acme.BookStore [--output-folder D:\……]

解决方案结构=============================
	推荐 在Visual Sudio中为每个模块创建一个单独的解决方案.
	推荐 将解决方案命名为CompanyName.ModuleName(对于ABP核心模块来说,它的命名方式是Volo.Abp.ModuleName).
	推荐 一个模块做为分层项目开发,因为它有几个包(项目)是相互关联的.
		每个包都有自己的模块定义文件,并显式声明所依赖的包/模块的依赖关系.

模块化架构最佳实践 & 约定
https://docs.abp.io/zh-Hans/abp/latest/Best-Practices/Module-Architecture

对于应用层和领域层实现的接口，都定义为virtual，方便重写，再替换IOC
ABP框架使用动态代理/拦截系统来执行验证.为了使其工作,你的方法应该是 virtual 的,服务应该被注入并通过接口(如IMyService)使用.----（IValidatableObject）
分层说明================
Web 层(Presentation Layer)
	表现层：可依赖 *.Application 包，*.Domain.Shared 包，*.EntityFrameworkCore 包，*.HttpApi 包
	Ec.Admin.Web	包含页面,视图,脚本,样式,图像和其他UI组件.仅依赖于 HttpApi 包
	Ec.Admin.HttpApi.Host		WebApi宿主项目
	Mk.DemoB.BackgroundJobs		后台任务项目，命名为 以 s 结尾。因为 Volo.Abp.BackgroundJobs.BackgroundJob 提供了类名叫 BackgroundJob
	

HTTP 层(Distributed Services Layers)
	Ec.Admin.HttpApi			为模块开发REST风格的HTTP API.
		HTTP API 包只依赖于 Application.Contracts 包. 不要依赖 Application 包.
		#、定义Controller
	Ec.Admin.HttpApi.Client		为HTTP API包提供客户端服务的HTTP API Client包。使用Abp的动态API客户端(Volo.Abp.Http.Client)
		HTTP API Client 包仅依赖于 Application.Contracts 包.

HTTP 层 和 Web 层，只能注入 应用服务层 提供的服务。一般来说应用服务层公开的api就可以满足需要。但有些情况如app、pc、h5各个环境
下返回的data需要特殊处理的，就在 HTTP 层 和 Web 层 处理


应用服务层(Application Layer)
	Ec.Admin.Application				包含应用服务实现.依赖于 Domain 包和 Application.Contracts 包
		#、实现 I**AppService
		#、AutoMapperProfile映射
	Ec.Admin.Application.Contracts		包含应用服务接口和相关的数据传输对象(DTO).依赖于 Domain.Shared 包
		#、I**AppService
		#、DTO    命名为：**Request、**Input的为输入参数，可以带上验证特性
		#、Permission定义（eg：**PermissionDefinitionProvider）
		
领域层(Domain Layer)
	Ec.Admin.Domain				包含实体, 仓储接口,领域服务接口及其实现和其他领域对象.依赖于 Domain.Shared 包.
		#、AggregateRoot		
		       1、里面包含实体的操作
		       2、每个实体都提供带主键Key的构造函数，创建实体。构造函数中包含Check.NotNull操作、传入主要的字段、字段的默认赋值
		#、值对象
		#、Service 领域服务（eg：**Manager，）
		#、IRepository
		#、Domain （eg：IdentityServer\IdentityServerDataSeedContributor.cs 数据种子Domain；Migrations\AdminDbMigrationService.cs 数据迁移；**Manager）
	Ec.Admin.Domain.Shared		包含常量,枚举和其他类型, 它不能包含实体,存储库,域服务或任何其他业务对象. 可以安全地与模块中的所有层使用. 此包也可以与第三方客户端使用.
		#、多语言 Location\Resources\**
		#、定义常量、枚举

基础设施层(Infrastructure Layer)
	Ec.Admin.EntityFrameworkCore		数据仓库，包含DbContext、Repository的实现
		#、实现IRepository
		#、定义DbContext
	Ec.Admin.EntityFrameworkCore.DbMigrations	数据迁移代码
	Ec.Admin.DbMigrator					控制台程序，数据迁移执行者

除了
Ec.Admin.Application.Contracts
Ec.Admin.Domain.Shared
设置为 netstandard2.1

其他项目都设置为netcoreapp3.1


依赖注入=========
固有的注册类型
	一些特定类型会默认注册到依赖注入.例子:
	模块类注册为singleton.
	MVC控制器（继承Controller或AbpController）被注册为transient.
	MVC页面模型（继承PageModel或AbpPageModel）被注册为transient.
	MVC视图组件（继承ViewComponent或AbpViewComponent）被注册为transient.
	应用程序服务（实现IApplicationService接口或继承ApplicationService类）注册为transient.
	存储库（实现IRepository接口）注册为transient.
	域服务（实现IDomainService接口）注册为transient.

依赖接口
	如果实现这些接口,则会自动将类注册到依赖注入:
	ITransientDependency 注册为transient生命周期.
	ISingletonDependency 注册为singleton生命周期.
	IScopedDependency 注册为scoped生命周期.

Dependency 特性
	配置依赖注入服务的另一种方法是使用DependencyAttribute.它具有以下属性:
	Lifetime: 注册的生命周期:Singleton,Transient或Scoped.
	TryRegister: 设置true则只注册以前未注册的服务.使用IServiceCollection的TryAdd ... 扩展方法.
	ReplaceServices: 设置true则替换之前已经注册过的服务.使用IServiceCollection的Replace扩展方法.

ExposeServices 特性
	ExposeServicesAttribute用于控制相关类提供了什么服务。
	eg：
	[ExposeServices(typeof(ITaxCalculator))]
	public class TaxCalculator: ICalculator, ITaxCalculator, ICanCalculate, ITransientDependency
	{

	}
	TaxCalculator类只公开ITaxCalculator接口.这意味着你只能注入ITaxCalculator,但不能注入TaxCalculator或ICalculator到你的应用程序中.

IServiceCollection.OnRegistred 事件
	你可能想在注册到依赖注入的每个服务上执行一个操作, 在你的模块的 PreConfigureServices 方法中, 使用 OnRegistred 方法注册一个回调(callback) 


模块AbpModule=============
ConfigureServices	将你的服务添加到依赖注入系统并配置其他模块的主要方法
PreConfigureServices和PostConfigureServices方法用来在ConfigureServices之前或之后覆盖和编写你的代码.请注意,在这些方法中编写的代码将在所有其他模块的ConfigureServices方法之前/之后执行
OnApplicationInitialization	应用程序初始化，可以从IServiceProvider中获取服务
OnPreApplicationInitialization和OnPostApplicationInitialization方法用来在OnApplicationInitialization之前或之后覆盖和编写你的代码.请注意,在这些方法中编写的代码将在所有其他模块的OnApplicationInitialization方法之前/之后执行.
OnApplicationShutdown	应用程序关闭

动态 C# API客户端(Volo.Abp.Http.Client) ==============
https://docs.abp.io/zh-Hans/abp/latest/AspNetCore/Dynamic-CSharp-API-Clients
作用：不需要通过 HttpClient 或者其他低级的HTTP功能调用远程服务并获取数据.
// 创建客户端代理
    public override void ConfigureServices(ServiceConfigurationContext context)
    {
        //创建动态客户端代理
        context.Services.AddHttpClientProxies(
            typeof(BookStoreApplicationModule).Assembly
        );
    }
// 使用的时候，直接注入服务即可
	public MyService(IBookAppService bookService)
    {
        _bookService = bookService;
    }
