


#、uap-csharp
https://github.com/ua-parser/uap-csharp.git
对 Request.Headers["User-Agent"] 做解析
能解析出：使用的浏览器、浏览器版本、使用的设备（IOS、Iphone、android、windows、linux、Mac OS）等等

#、ObjectsComparer 一个对象到对象的比较器
场景：获取两个对象之间值是否有改变，如果没有改变，我们就给出"数据未修改，请问是否关闭窗体“等提示
https://github.com/ValeraT1982/ObjectsComparer
https://mp.weixin.qq.com/s/YRTARPbj3ql6LEs7O-3-2w

#、AsyncEx - async/await 的辅助库
    private readonly AsyncLock _mutex = new AsyncLock();
    public async Task UseLockAsync()
    {
      // AsyncLock can be locked asynchronously
      using (await _mutex.LockAsync())
      {
        // It's safe to await while the lock is held
        await Task.Delay(TimeSpan.FromSeconds(1));
      }
    }
https://github.com/StephenCleary/AsyncEx

#、Microsoft.AspNetCore.HeaderPropagation 
在 ASP.NET Core 中使用 HTTP 标头传播
https://mp.weixin.qq.com/s/shCiGlkjxIC9d17WqY1fKg

#、Comparers
为任何类生成排序比较器。用于sort。方便快捷。 支持 orderby().thenby() 多字段排序规则
https://github.com/StephenCleary/Comparers

#、CSIJS
Site: github.com/tnfe/csijs
CSI.JS是一个前端日志系统，它将错误信息记录于本地localStorage中。无任何依赖、无入侵性。
使用非常简单，很容易引入你的系统中，而且不会造成任何影响。 它可以帮你快速重建犯罪现场。

#、CacheManager
https://github.com/MichaCo/CacheManager
支持redis、memcache、couchbase等缓存，支持bond、json、protobuf、datacontract等序列化方式
支持.net4.5，.net standard 2.0

#、HtmlSanitizer
清楚文本中html标记，避免xss攻击
https://github.com/mganss/HtmlSanitizer

#、AngleSharp
AngleSharp是基于.NET（C#）开发的专门解析HTML源码的DLL组件。
根据HTML的DOM结构操作HTML，整个DOM已传输到逻辑类结构中。这种结构可以更好的操作DOM元素。
且AngleSharp的性能优于HtmlAgilityPack。
https://github.com/AngleSharp/AngleSharp

#、.net core EPPlus npoi_.NET导出Excel的四种方法及评测
https://blog.csdn.net/weixin_39978444/article/details/111040277
另外：https://blog.csdn.net/waterstar50/article/details/80590355
性能测试：（2021年11月的数据）
    次数	        分配内存	    内存占比	耗时‍	耗时占比
    基准(仅反射)	9,853,936	    1.85%	    133	    4.82%
    NPOI	        1,589,237,064	297.83%	    10355	375.32%
    EPPlus	        533,598,440	    100%	    2759	100%        以EPPlus的测试数据为100%基准：
    OpenXML	        555,985,936	    104.19%	    3884	140.78%
    Aspose	        357,933,360	    67%	        2007	72.74%
    可以得出以下结论：
        Demo基于反射，但反射总损耗的性能不高，内存、耗时均不超过5%；
        NPOI的性能表现是所有项目中最差的，每次需要分配1.5GB的内存和超过10秒的耗时；
        EPPlus表现不错，内存和耗时在开源组中表现最佳；
        收费的Aspose.Cells表现最佳，内存占用最低，用时也最短；
        较为底层的OpenXML表现非常一般，比EPPlus要差，更不能与收费的Aspose相提并论；
2022-4-19：
    EPPlus星1.1k ； 下载量46.8M  （目前收费）   支持Excel 2007+ (.xlsx, .xlsm)
        EPPlus 老版本：https://github.com/JanKallman/EPPlus         3.6k星，已经两年没有维护。license：LGPL    
        EPPlus 新版本：https://github.com/EPPlusSoftware/EPPlus     1.1k星，license授权改为：license：Polyform Noncommercial 。用于商业软件，需要购买授权
        EPPlus仅依赖基础类库BCL，完全没有第三方包依赖，也是.NET原生库。
        EPPlus只支持导出Office 2007之后的格式，也就是xlsx。（不支持xls）
    NPOI星4.3k ； 下载量17.7M    （免费）Apache-2.0 License  https://github.com/nissl-lab/npoi  支持Office 2003/2007(.xls .xlsx, .xlsm)
    ClosedXML星3k； 下载量19.9M  （免费）MIT  https://github.com/ClosedXML/ClosedXML   支持Excel 2007+ (.xlsx, .xlsm)+
        ClosedXML 是基于 OpenXML API 封装的 .NET 类库
        ClosedXML.Report  创建一份xlsx 模板，设置数据填充规则，就可传入模型，自动填充  https://blog.csdn.net/chinaherolts2008/article/details/111773031

    当数据量很大导出到Excel表格的时候(几十万条甚至上百万条的数据导出到Excel中)通常会遇到两个问题：
    #、一个是内存溢出，由于需要处理的数据量比较大，导致Excel占用的内存过多从而导致数据还没有导出完就因为内存溢出而失败；
    #、Excel 中提示不能超过256列或65536行的处理
        #、在Office2003及之前版本的Excel中，xls格式的表格，支持最大的列为256列，最大的行为65536行。（https://zhuanlan.zhihu.com/p/71361385?ivk_sa=1024320u）
        #、数据多于65536行时，这时候需要考虑Excel分页功能。即在Excel文件中创建多个 worksheet 
        #、升级xls版本为xlsx。目前一些excel组件也只支持Excel 2007+ (.xlsx, .xlsm)

#、DeepCloner  实现深拷贝、浅拷贝的扩展方法
https://github.com/force-net/DeepCloner

#、布隆过滤器 （判断一个元素是否在集合中--大数据）
https://github.com/vla/BloomFilter.NetCore
https://blog.csdn.net/fengyuyeguirenenen/article/details/123754926
使用场景
    网页爬虫对URL的去重
    垃圾邮件过滤，从数十亿个垃圾邮件列表中判断某邮箱是否是杀垃圾邮箱。
    解决数据库缓存击穿，黑客攻击服务器时，会构建大量不存在于缓存中的key向服务器发起请求，在数据量足够大的时候，频繁的数据库查询会导致挂机。
    秒杀系统，查看用户是否重复购买。

#、snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID
    // 原理：https://www.jianshu.com/p/b7a3f0fdd717
    // 所有位数加起来共64位，恰好是一个Long型（转换为字符串长度为18）
    // eg:412992501465481216
    // C#：https://github.com/RobThree/IdGen

#、Json.NET + Json.NET Schema
   https://www.cnblogs.com/mulaba/p/16264557.html
   Newtonsoft.Json.Schema   
   #、支持从类生成 JSON Schema
   #、支持验证一个json或类是否满足 JSON Schema 

#、ImageMagick 图片处理的终极工具
   在图像格式之间进行转换以及调整图像的大小，模糊，裁剪，去斑点，抖动，绘制，翻转，合并，重新采样等等。
   https://github.com/dlemstra/Magick.NET
   https://zhuanlan.zhihu.com/p/341328099

#、集合性能优化
   Collections.Pooled：通过池化内存来达到降低内存占用和GC的目的
   Pooled类型实现了IDispose接口，它通过Dispose()方法将使用的内存归还到池中，所以我们需要在使用完Pooled集合对象以后调用它的Dispose()方法。或者可以直接使用using var关键字。
   https://github.com/jtmueller/Collections.Pooled
   https://github.com/jtmueller/Collections.Pooled
    .NET原生	                Collections.Pooled	                备注
    List<T>	                    PooledList<T>	                    泛型集合类
    Dictionary<TKey, TValue>	PooledDictionary<TKey, TValue>	    泛型字典类
    HashSet<T>	                PooledSet<T>	                    泛型哈希集合类
    Stack<T>	                Stack<T>	                        泛型栈
    Queue<T>	                PooledQueue<T>	                    泛型队列

#、pdf
    https://github.com/UglyToad/PdfPig
    https://github.com/QuestPDF/QuestPDF
