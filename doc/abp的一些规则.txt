
IAsyncQueryableExecuter 是一个用于异步执行 IQueryable<T> 对象的服务,不依赖于实际的数据库提供程序.
在Application层：List<Product> products = await _asyncExecuter.ToListAsync(query);
ABP框架使用实际数据库提供程序的API异步执行查询。虽然这不是执行查询的常见方式，但它是使用异步API而不依赖于数据库提供者的最佳方式。
当以下情况时，这个方法是推荐的：
	如果您想开发应用程序代码而不依赖数据库提供程序。
	如果你正在构建一个没有数据库提供程序集成包的可重用库,但是在某些情况下需要执行 IQueryable<T>对象.
例如,ABP框架在 CrudAppService 基类中(参阅应用程序文档)使用 IAsyncQueryableExecuter.


最佳实践
你可以自由设计DTO类,然而这里有一些你可能想要遵循的最佳实践和建议.
共同原则
	DTO应该是可序列化的,因为它们通常是序列化和反序列化的(JSON或其他格式). 如果你有另一个带参数的构造函数,建议使用空(无参数)的公共构造函数.
	除某些验证代码外,DTO不应包含任何业务逻辑.
	DTO不要继承实体,也不要引用实体. 应用程序启动模板已经通过分隔项目来阻止它.
	如果你使用自动对象到对象映射库,如AutoMapper,请启用映射配置验证以防止潜在的错误.
输入DTO原则
	只定义用例所需的属性. 不要包含不用于用例的属性,这样做会使开发人员感到困惑.
	不要在不同的应用程序服务方法之间重用输入DTO. 因为不同的用例将需要和使用DTO的不同属性,从而导致某些属性在某些情况下没有使用,这使得理解和使用服务更加困难,并在将来导致潜在的错误.

输出DTO原则
如果在所有情况下填充所有属性,就可以重用输出DTO.

HTTP Method
ABP在确定服务方法的HTTP Method时使用命名约定:
	Get: 如果方法名称以GetList,GetAll或Get开头.
	Put: 如果方法名称以Put或Update开头.
	Delete: 如果方法名称以Delete或Remove开头.
	Post: 如果方法名称以Create,Add,Insert或Post开头.
	Patch: 如果方法名称以Patch开头.
	其他情况, Post 为 默认方式.
如果需要为特定方法自定义HTTP Method, 则可以使用标准ASP.NET Core的属性([HttpPost], [HttpGet], [HttpPut]... 等


自动生成的api命名
会删除AppService,ApplicationService和Service的后缀并将其转换为 camelCase. 如果你的应用程序服务类名称为BookAppService.那么它将变为/book.
	如果要自定义命名, 则设置UrlControllerNameNormalizer选项. 它是一个委托允许你自定义每个控制器/服务的名称.
如果该方法具有 'id'参数, 则会在路由中添加'/{id}'.
如有必要,它会添加操作名称. 操作名称从服务上的方法名称获取并标准化;
	删除'Async'后缀. 如果方法名称为'GetPhonesAsync',则变为GetPhones.
	删除HTTP method前缀. 基于的HTTP method删除GetList,GetAll,Get,Put,Update,Delete,Remove,Create,Add,Insert,Post和Patch前缀, 因此GetPhones变为Phones, 因为Get前缀和GET请求重复.
	将结果转换为camelCase.
	如果生成的操作名称为空,则它不会添加到路径中.否则它会被添加到路由中(例如'/phones').对于GetAllAsync方法名称,它将为空,因为GetPhonesAsync方法名称将为phone.
	可以通过设置UrlActionNameNormalizer选项来自定义.It's an action delegate that is called for every method.
如果有另一个带有'Id'后缀的参数,那么它也会作为最终路线段添加到路线中(例如'/phoneId').