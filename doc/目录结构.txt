
目录划分参考：https://github.com/abpframework/eShopOnAbp

1、framework
    #、leopard				netcore框架
2、eshop/apps
    #、backend-admin-web	电商后台网页（net技术则引入backend的各种httpClient）
    #、public-web		    电商网站	（net技术则引入backend的各种httpClient）
    #、wx-app		        微信小程序
    #、mobile-app		    手机端应用（IOS/Android）
    #、h5			        h5
    #、auth-server-web		带页面的认证中心，（依赖：AbpAccountWebIdentityServer、AdministrationServiceEntityFrameworkCoreModule、IdentityServiceEntityFrameworkCoreModule）。

3、eshop/services
    #、administration       （Permission、Setting、AuditLogging、Feature），account.admin
    #、identity             （Identity、OpenIddict）
    #、member               会员中心  accoount.public
    #、basket	            购物车、产品
    #、catalog	            目录
    #、cmskit	
    #、ordering	            订单
    #、payment	            支付

4、eshop/gateways
    #、web			        Yarp.ReverseProxy,服务如：account、identity、administration、feature、permission、setting、catolog、ordering、cmskit
    #、web-public	        Yarp.ReverseProxy,服务如：account、administration、catalog、basket、ordering、payment、cmskit

5、eshop/etc		不同环境，一个子目录。方便分不同github做权限管理
    #、development
        cert
        docker
    #、production

注：
auth：不同身份的使用者，应该使用同一个认证中心。比如淘宝个人用户，和商家用户，使用的都是同一个用户名和密码，点登录获取token的url不同（eg：buyer/token ,seller/token），则返回不一样的身份token

项目中github仓库应该如何划分？
    一级项目：项目类（eg：eshop）、共用的框架类（eg：framework）
    职能项目：一级项目中每一个具有独立作用的子项目，如上：带#的都为单个职能项目

    根据开发中协作人员的数量，来进行代码仓库的划分。
    场景一：对于1-3开发人员，开发人员越少越适用：对于同一个项目（eg：eshop），可以把项目的所有代码都放到一个仓库中。特点：方便，不用切换职能项目，拉取分支等
    场景二：多人协作开发，开发人员越多越适用：把项目中每一个职能项目，都建一个仓库。特点：避免冲突，减少合并代码，便于职能项目的仓库权限管理
    虽然上面两种场景划分的github不一样，但是文件夹组织和文件夹命名要保持一致，避免差异带来的复杂性


是否考虑使用eshop/modules
    使用的优点：
        #、services可以比较少，比如后端只需要一个 LY.MicroService.BackendAdmin.HttpApi.Host 把所有需要的模块引入即可
        #、modules的重用性强，在services中需要modules的，直接引入项目即可
    使用的缺点：
        #、不方便调试，断点是从services进入的，调试和修改modules中的项目比较麻烦。因为不能为了调试一个services就把对应的module也引入到sin方案中，如果引入，sin方案中会有非常多的项目
    不使用eshop/modules的设计：
        #、administration就只负责一些通用的功能的管理，如：Permission、Setting、AuditLogging、Feature等等，其他特定服务如ordering、payment则调用独立的端口
        #、不同服务调用不同端口的解决方案是：使用网关来管理服务，对外暴露统一的端口
