前端（英语：front-end）和后端（英语：back-end）

定义端口规范
（应当同时启用http和https，因为对于内部访问，直接访问http效率更高。对于外部访问，走https更安全）
    http	**02
    https	**05    

每个大项目都划分好端口范围：
    #、一个大项目预留1000个端口号足矣。eg：这个项目以44***开头
    #、每个服务，预留10个端口号，用于部署集群
    EShop.Identity.HttpApi.Host     44105 （预留44101-44110）   
    EShop.Identity.AuthServer   44115 （预留44111-44120）   
        identityserver配置链接
        https://localhost:44115/.well-known/openid-configuration
    EShop.Administration.HttpApi.Host   44145  （预留44141-44150）  
    demob.api         44305 （预留44301-44310）
    democ.api         44405 （预留44401-44410）


    AdministrationAppGateway      44805 （预留44801-44810）
    InternalGateway             44815 （预留44811-44820）
    PublicWebSiteGateway        44825 （预留44821-44830）

    Client
        Administration_Web          4200

es 默认端口9200 老是被攻击，导致数据篡改，elk运行异常
elastic：http://159.75.253.251:59210
elasticsearch-head：elastic：http://159.75.253.251:9100
kibana：http://159.75.253.251:5601/
consul:http://159.75.253.251:8500/

nginx:http://159.75.253.251:8081/


项目职责
EShop.Identity.HttpApi.Host：封装Account、Identity服务
EShop.Identity.AuthServer：对接ids4，专门做身份认证
EShop.Administration.HttpApi.Host：后台管理服务，包含如：审计、特征、权限、设置管理、租户、版本、等

xftp中文文件名乱码
https://blog.csdn.net/fj_changing/article/details/122787205
xshell中文显示乱码问题
https://blog.csdn.net/qq_45988641/article/details/123631126

程序代码目录
  linux环境
    代码目录：/usr/local/application/src
    数据目录：/usr/local/environment
  windows环境
    代码目录：E:\Code\my_code\abp-vue-vben-admin
    数据目录：E:\Docker\Data\Leapard

发布案例
  EShop.Identity.HttpApi.Host
  docker build -f Dockerfile -t eshop_identity_service.img ../../../ 
  docker run --name eshop_identity_service -p 44102:80  -d eshop_identity_service.img 
  
  进入容器：docker exec -it eshop_identity_service /bin/bash

常用命令--docker
  docker stop [container id or name]：停止运行指定容器

  
  构建：docker-compose build [服务名],[服务名]
  重新构建：docker-compose build --no-cache [服务名],[服务名]
  创建服务（不启动）：docker-compose create
  启动：docker-compose up [服务名],[服务名]
        docker-compose up -d    -d代表在后台运行

  停止：docker-compose stop [服务名],[服务名] 
  停止：docker-compose start [服务名],[服务名] 
  删除：docker-compose rm [服务名],[服务名]    // 删除前必须先stop
  销毁：docker-compose down
  重启：docker-compose restart

  docker-compose -f docker-compose.yml -f docker-compose.override.prod.yml up -d


git 拉取远程代码
https://blog.csdn.net/weijinqian0/article/details/76217014
git clone https://github.com/heyuquan/abp-vue-vben-admin.git
Username: 369220123@qq.com
Password: your_token
    进入代码目录，git pull 
Git 本地的撤销修改和删除操作
https://www.cnblogs.com/qlqwjy/p/8378851.html
git reset --hard

强制删除目录和子目录：rm -rf 目录
